name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # 1. 创建 Release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create.outputs.upload_url }}
      release_id: ${{ steps.create.outputs.id }}
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        id: create
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: "正在生成发布说明... 请稍候刷新查看。"
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 2. 多平台构建
  build:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            platform_key: darwin-x86_64
            arch: x86_64
            target: x86_64-apple-darwin
            bundle_dir: dmg
            ext: dmg
            content_type: application/x-apple-diskimage
          - platform: macos-latest
            platform_key: darwin-aarch64
            arch: aarch64
            target: aarch64-apple-darwin
            bundle_dir: dmg
            ext: dmg
            content_type: application/x-apple-diskimage
          - platform: ubuntu-latest
            platform_key: linux-x86_64
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            bundle_dir: deb
            ext: deb
            content_type: application/vnd.debian.binary-package
          - platform: ubuntu-latest
            platform_key: linux-aarch64
            arch: aarch64
            target: aarch64-unknown-linux-gnu
            bundle_dir: deb
            ext: deb
            content_type: application/vnd.debian.binary-package
          - platform: windows-latest
            platform_key: windows-x86_64
            arch: x86_64
            target: x86_64-pc-windows-msvc
            bundle_dir: msi
            ext: msi
            content_type: application/x-msi
          - platform: windows-latest
            platform_key: windows-arm64
            arch: arm64
            target: aarch64-pc-windows-msvc
            bundle_dir: msi
            ext: msi
            content_type: application/x-msi

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          pnpm list
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # Rust cache
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.target }}

      - name: Install system dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf
          # 验证安装
          dpkg -l libgtk-3-dev webkit2gtk-4.0

      - name: Install system dependencies (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          brew install webkit2gtk

      - name: Check environment
        run: |
          node --version
          pnpm --version
          rustc --version
          cargo --version
        shell: bash

      - name: Check Tauri configuration
        run: pnpm tauri info
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Build with Tauri
        id: tauri-build
        run: |
          pnpm tauri build --target ${{ matrix.target }} --verbose
          # 查找构建产物
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            ARTIFACT_PATH=$(find src-tauri/target/${{ matrix.target }}/release/bundle/msi -name "*.msi" | head -n 1)
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            ARTIFACT_PATH=$(find src-tauri/target/${{ matrix.target }}/release/bundle/dmg -name "*.dmg" | head -n 1)
          else
            ARTIFACT_PATH=$(find src-tauri/target/${{ matrix.target }}/release/bundle/deb -name "*.deb" | head -n 1)
          fi
          echo "artifactPath=$ARTIFACT_PATH" >> $GITHUB_OUTPUT
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Locate build artifact and signature
        id: find-artifacts
        run: |
          # 从构建步骤获取构建产物路径
          ARTIFACT_PATH="${{ steps.tauri-build.outputs.artifactPath }}"
          
          if [ -z "$ARTIFACT_PATH" ] || [ ! -f "$ARTIFACT_PATH" ]; then
            echo "ERROR: No main artifact found at $ARTIFACT_PATH"
            # 显示可能的构建产物目录
            echo "Possible artifacts:"
            find src-tauri/target -name "*.msi" -o -name "*.dmg" -o -name "*.deb"
            exit 1
          fi
          
          # 查找对应的签名文件 (.sig)
          SIG_FILE="${ARTIFACT_PATH}.sig"
          
          if [ ! -f "$SIG_FILE" ]; then
            echo "ERROR: Signature file not found at $SIG_FILE"
            # 显示目录内容帮助调试
            echo "Directory contents:"
            ls -la $(dirname "$SIG_FILE")
            exit 1
          fi
          
          # 输出找到的文件路径和名称
          ASSET_NAME="${{ github.ref_name }}-${{ matrix.platform }}-${{ matrix.arch }}.${{ matrix.ext }}"
          echo "file_path=$ARTIFACT_PATH" >> $GITHUB_OUTPUT
          echo "sig_path=$SIG_FILE" >> $GITHUB_OUTPUT
          echo "asset_name=$ASSET_NAME" >> $GITHUB_OUTPUT
          
          # 读取签名内容
          echo "sig_content<<EOF" >> $GITHUB_OUTPUT
          cat "$SIG_FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload main artifact to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find-artifacts.outputs.file_path }}
          asset_name: ${{ steps.find-artifacts.outputs.asset_name }}
          asset_content_type: ${{ matrix.content_type }}

      - name: Upload signature file to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find-artifacts.outputs.sig_path }}
          asset_name: ${{ steps.find-artifacts.outputs.asset_name }}.sig
          asset_content_type: application/octet-stream
      
      # 保存签名内容和URL供后续步骤使用
      - name: Save signature info
        run: |
          # 使用特殊分隔符保存签名内容，避免格式问题
          echo "${{ matrix.platform_key }}<<END_SIGNATURE" >> $GITHUB_ENV
          cat ${{ steps.find-artifacts.outputs.sig_path }} >> $GITHUB_ENV
          echo "END_SIGNATURE" >> $GITHUB_ENV
          
          echo "${{ matrix.platform_key }}_url=https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ steps.find-artifacts.outputs.asset_name }}" >> $GITHUB_ENV

  # 3. 生成 release.txt 和 latest.json 并上传
  generate-release-files:
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate release files
        id: generate
        run: |
          VERSION=${{ github.ref_name }}
          CLEAN_VERSION=${VERSION#v}
          DOWNLOAD_BASE_URL="https://github.com/${{ github.repository }}/releases/download/$VERSION"
          
          # 生成 release.txt
          cat > release.txt <<EOF
          Release $VERSION
          ==================

          Download Links:

          ### Windows
          - [x86_64]($DOWNLOAD_BASE_URL/$VERSION-windows-latest-x86_64.msi)
          - [ARM64]($DOWNLOAD_BASE_URL/$VERSION-windows-latest-arm64.msi)
          
          ### macOS
          - [x86_64 (Intel)]($DOWNLOAD_BASE_URL/$VERSION-macos-latest-x86_64.dmg)
          - [aarch64 (Apple Silicon)]($DOWNLOAD_BASE_URL/$VERSION-macos-latest-aarch64.dmg)
          
          ### Linux
          - [x86_64]($DOWNLOAD_BASE_URL/$VERSION-ubuntu-latest-x86_64.deb)
          - [aarch64]($DOWNLOAD_BASE_URL/$VERSION-ubuntu-latest-aarch64.deb)
          EOF
          
          # 生成 latest.json，处理签名内容中的换行
          cat > latest.json <<EOF
          {
            "version": "$CLEAN_VERSION",
            "notes": "Release $VERSION",
            "pub_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "platforms": {
              "windows-x86_64": {
                "url": "${{ env.windows-x86_64_url }}",
                "signature": "$(echo '${{ env.windows-x86_64 }}' | sed -e ':a' -e '/^\n*$/{$d;N;ba' -e '}' -e 's/\n/\\n/g')"
              },
              "windows-arm64": {
                "url": "${{ env.windows-arm64_url }}",
                "signature": "$(echo '${{ env.windows-arm64 }}' | sed -e ':a' -e '/^\n*$/{$d;N;ba' -e '}' -e 's/\n/\\n/g')"
              },
              "darwin-x86_64": {
                "url": "${{ env.darwin-x86_64_url }}",
                "signature": "$(echo '${{ env.darwin-x86_64 }}' | sed -e ':a' -e '/^\n*$/{$d;N;ba' -e '}' -e 's/\n/\\n/g')"
              },
              "darwin-aarch64": {
                "url": "${{ env.darwin-aarch64_url }}",
                "signature": "$(echo '${{ env.darwin-aarch64 }}' | sed -e ':a' -e '/^\n*$/{$d;N;ba' -e '}' -e 's/\n/\\n/g')"
              },
              "linux-x86_64": {
                "url": "${{ env.linux-x86_64_url }}",
                "signature": "$(echo '${{ env.linux-x86_64 }}' | sed -e ':a' -e '/^\n*$/{$d;N;ba' -e '}' -e 's/\n/\\n/g')"
              },
              "linux-aarch64": {
                "url": "${{ env.linux-aarch64_url }}",
                "signature": "$(echo '${{ env.linux-aarch64 }}' | sed -e ':a' -e '/^\n*$/{$d;N;ba' -e '}' -e 's/\n/\\n/g')"
              }
            }
          }
          EOF
        shell: bash

      - name: Update Release description with release.txt
        run: |
          RELEASE_NOTE=$(cat release.txt | jq -sR .)
          curl -X PATCH "https://api.github.com/repos/${{ github.repository }}/releases/${{ needs.create-release.outputs.release_id }}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": $RELEASE_NOTE}"
        shell: bash

      - name: Upload release.txt
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: release.txt
          asset_name: release.txt
          asset_content_type: text/plain

      - name: Upload latest.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: latest.json
          asset_name: latest.json
          asset_content_type: application/json

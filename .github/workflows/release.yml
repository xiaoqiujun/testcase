name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # 1. 创建 Release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create.outputs.upload_url }}
      release_id: ${{ steps.create.outputs.id }}
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        id: create
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: "正在生成发布说明... 请稍候刷新查看。"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 2. 多平台构建
  build:
    needs: create-release
    strategy:
      matrix:
        include:
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            arch: x86_64
            bundle_dir: dmg
            ext: dmg
            content_type: application/x-apple-diskimage
          - os: macos-latest
            target: aarch64-apple-darwin
            arch: aarch64
            bundle_dir: dmg
            ext: dmg
            content_type: application/x-apple-diskimage
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x86_64
            bundle_dir: msi
            ext: msi
            content_type: application/x-msi
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            arch: arm64
            bundle_dir: msi
            ext: msi
            content_type: application/x-msi
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build Tauri app
        run: pnpm tauri build --target ${{ matrix.target }}
        env:
          TAURI_TARGET: ${{ matrix.target }}
          # 新增：传递私钥给 Tauri 构建流程
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          # 如果私钥有密码，还需添加（可选）
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Locate build artifact
        id: find-artifact
        run: |
          ARTIFACT_DIR="src-tauri/target/${{ matrix.target }}/release/bundle/${{ matrix.bundle_dir }}"
          FILE=$(find "$ARTIFACT_DIR" -type f -name "*.$(echo ${{ matrix.ext }} | tr '[:upper:]' '[:lower:]')" | head -n 1)
          
          if [ -z "$FILE" ]; then
            echo "ERROR: No artifact found in $ARTIFACT_DIR"
            exit 1
          fi
          
          echo "file_path=$FILE" >> $GITHUB_OUTPUT
          echo "asset_name=${{ github.ref_name }}-${{ matrix.os }}-${{ matrix.arch }}.${{ matrix.ext }}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Verify artifact exists
        run: |
          if [ ! -f "${{ steps.find-artifact.outputs.file_path }}" ]; then
            echo "Error: Build artifact not found at ${{ steps.find-artifact.outputs.file_path }}"
            exit 1
          fi
        shell: bash

      - name: Sign update package
        id: sign-artifact
        run: |
          echo "${{ secrets.TAURI_PRIVATE_KEY }}" > private-key.pem
          
          if [ -n "${{ secrets.TAURI_KEY_PASSWORD }}" ]; then
            echo "${{ secrets.TAURI_KEY_PASSWORD }}" | pnpm tauri signer sign \
              "${{ steps.find-artifact.outputs.file_path }}" \
              --private-key private-key.pem \
              --password-stdin
          else
            pnpm tauri signer sign \
              "${{ steps.find-artifact.outputs.file_path }}" \
              --private-key private-key.pem
          fi
          
          echo "signature_path=${{ steps.find-artifact.outputs.file_path }}.sig" >> $GITHUB_OUTPUT
          rm -f private-key.pem
        shell: bash

      - name: Upload main artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find-artifact.outputs.file_path }}
          asset_name: ${{ steps.find-artifact.outputs.asset_name }}
          asset_content_type: ${{ matrix.content_type }}

      - name: Upload signature file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.sign-artifact.outputs.signature_path }}
          asset_name: ${{ steps.find-artifact.outputs.asset_name }}.sig
          asset_content_type: application/octet-stream

  # 3. 生成 release.txt 和 latest.json 并上传
  generate-release-files:
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate release files
        id: generate
        run: |
          VERSION=${{ github.ref_name }}
          CLEAN_VERSION=${VERSION#v}
          DOWNLOAD_BASE_URL="https://github.com/${{ github.repository }}/releases/download/$VERSION"
          
          cat > release.txt <<EOF
          Release $VERSION
          ==================

          Download Links:

          ### Windows
          - [x86_64]($DOWNLOAD_BASE_URL/$VERSION-windows-latest-x86_64.msi)
          - [ARM64]($DOWNLOAD_BASE_URL/$VERSION-windows-latest-arm64.msi)
          
          ### macOS
          - [x86_64 (Intel)]($DOWNLOAD_BASE_URL/$VERSION-macos-latest-x86_64.dmg)
          - [aarch64 (Apple Silicon)]($DOWNLOAD_BASE_URL/$VERSION-macos-latest-aarch64.dmg)
          EOF
          
          cat > latest.json <<EOF
          {
            "version": "$CLEAN_VERSION",
            "notes": "Release $VERSION",
            "pub_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "platforms": {
              "windows-x86_64": {
                "url": "$DOWNLOAD_BASE_URL/$VERSION-windows-latest-x86_64.msi",
                "signature": "$DOWNLOAD_BASE_URL/$VERSION-windows-latest-x86_64.msi.sig"
              },
              "windows-arm64": {
                "url": "$DOWNLOAD_BASE_URL/$VERSION-windows-latest-arm64.msi",
                "signature": "$DOWNLOAD_BASE_URL/$VERSION-windows-latest-arm64.msi.sig"
              },
              "darwin-x86_64": {
                "url": "$DOWNLOAD_BASE_URL/$VERSION-macos-latest-x86_64.dmg",
                "signature": "$DOWNLOAD_BASE_URL/$VERSION-macos-latest-x86_64.dmg.sig"
              },
              "darwin-aarch64": {
                "url": "$DOWNLOAD_BASE_URL/$VERSION-macos-latest-aarch64.dmg",
                "signature": "$DOWNLOAD_BASE_URL/$VERSION-macos-latest-aarch64.dmg.sig"
              }
            }
          }
          EOF

      - name: Update Release description with release.txt
        run: |
          RELEASE_NOTE=$(cat release.txt | jq -sR .)
          curl -X PATCH "https://api.github.com/repos/${{ github.repository }}/releases/${{ needs.create-release.outputs.release_id }}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": $RELEASE_NOTE}"
        shell: bash

      - name: Upload release.txt
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: release.txt
          asset_name: release.txt
          asset_content_type: text/plain

      - name: Upload latest.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: latest.json
          asset_name: latest.json
          asset_content_type: application/json

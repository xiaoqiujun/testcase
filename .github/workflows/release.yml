name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # 1. 准备配置和创建Release
  prepare-and-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create.outputs.upload_url }}
      release_id: ${{ steps.create.outputs.id }}
      app_name: ${{ steps.extract-config.outputs.app_name }}
      app_version: ${{ steps.extract-config.outputs.app_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract and sync versions
        id: extract-config
        run: |
          # 安装jq用于处理JSON文件
          sudo apt-get install -y jq
          
          # 从package.json获取版本号
          PACKAGE_VERSION=$(jq -r '.version' package.json)
          echo "从package.json获取版本: $PACKAGE_VERSION"
          
          # 从tauri.conf.json获取应用名称
          APP_NAME=$(jq -r '.package.productName' src-tauri/tauri.conf.json)
          echo "从tauri.conf.json获取应用名称: $APP_NAME"
          
          # 确保tauri.conf.json的version与package.json一致
          echo "更新tauri.conf.json版本为 $PACKAGE_VERSION"
          jq --arg version "$PACKAGE_VERSION" '.package.version = $version' src-tauri/tauri.conf.json > temp.json
          mv temp.json src-tauri/tauri.conf.json
          
          # 输出变量供后续步骤使用
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "app_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes and release.txt
        id: release_notes
        run: |
          # 提取版本信息
          VERSION=${{ github.ref_name }}
          CLEAN_VERSION=${VERSION#v}
          APP_NAME="${{ steps.extract-config.outputs.app_name }}"
          DOWNLOAD_BASE_URL="https://github.com/${{ github.repository }}/releases/download/$VERSION"
          
          # 生成release.txt
          cat > release.txt <<EOF
          Release $VERSION
          ==================

          Download Links:

          ### Windows
          - [x86_64]($DOWNLOAD_BASE_URL/$APP_NAME_$CLEAN_VERSION_x86_64.msi)
          - [ARM64]($DOWNLOAD_BASE_URL/$APP_NAME_$CLEAN_VERSION_arm64.msi)
          
          ### macOS
          - [x86_64 (Intel)]($DOWNLOAD_BASE_URL/$APP_NAME_$CLEAN_VERSION_x86_64.dmg)
          - [aarch64 (Apple Silicon)]($DOWNLOAD_BASE_URL/$APP_NAME_$CLEAN_VERSION_aarch64.dmg)
          
          ### Linux
          - [x86_64]($DOWNLOAD_BASE_URL/$APP_NAME_$CLEAN_VERSION_amd64.AppImage)
          - [x86_64 Debian]($DOWNLOAD_BASE_URL/$APP_NAME_$CLEAN_VERSION_amd64.deb)
          EOF
          
          # 生成发布说明（包含变更日志）
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "# Release $VERSION" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## Changelog" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          # 获取当前标签与上一个标签之间的提交记录
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## Download Links" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          cat release.txt | grep -v "==================" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }} - ${{ steps.extract-config.outputs.app_name }}"
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
          files: |
            release.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 2. 多平台构建
  build:
    needs: prepare-and-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform_key: windows-x86_64
            asset_suffix: "x86_64.msi"
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            platform_key: windows-aarch64
            asset_suffix: "arm64.msi"
          - os: macos-latest
            target: aarch64-apple-darwin
            platform_key: darwin-aarch64
            asset_suffix: "aarch64.dmg"
          - os: macos-latest
            target: x86_64-apple-darwin
            platform_key: darwin-x86_64
            asset_suffix: "x86_64.dmg"
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            platform_key: linux-x86_64
            asset_suffix: "amd64.AppImage"
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            platform_key: linux-x86_64-deb
            asset_suffix: "amd64.deb"

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract version and app name
        run: |
          echo "APP_NAME=${{ needs.prepare-and-release.outputs.app_name }}" >> $GITHUB_ENV
          echo "CLEAN_VERSION=${{ github.ref_name#v }}" >> $GITHUB_ENV
          echo "FULL_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Sync tauri.conf.json version with package.json
        run: |
          # 安装jq用于处理JSON文件
          if [ "${{ matrix.os }}" = "ubuntu-22.04" ]; then
            sudo apt-get install -y jq
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew install jq
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            choco install jq -y
          fi
          
          # 从package.json获取版本号并更新到tauri.conf.json
          PACKAGE_VERSION=$(jq -r '.version' package.json)
          echo "同步tauri.conf.json版本为 $PACKAGE_VERSION"
          jq --arg version "$PACKAGE_VERSION" '.package.version = $version' src-tauri/tauri.conf.json > temp.json
          mv temp.json src-tauri/tauri.conf.json

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          save-if: false
          
      - name: Install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxslt1.1 libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev patchelf
          
      - name: Install x86 OpenSSL (macOS only)
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          arch -x86_64 brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          pnpm list
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Tauri build
        id: tauri_build
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "${{ env.APP_NAME }} ${{ github.ref_name }}"
          releaseBody: ${{ needs.prepare-and-release.outputs.release_body }}
          releaseDraft: true
          prerelease: false
          args: --target ${{ matrix.target }}
          includeUpdaterJson: true
          assetNamePattern: "${{ env.APP_NAME }}_${{ env.CLEAN_VERSION }}_${{ matrix.asset_suffix }}"

      - name: Save build artifacts info
        run: |
          # 提取构建产物信息
          echo 'ARTIFACT_INFO<<EOF' >> $GITHUB_ENV
          echo '${{ steps.tauri_build.outputs.artifactInfo }}' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          
          # 创建平台特定的JSON片段
          echo 'PLATFORM_JSON<<EOF' > platform.json.tmp
          echo '  "${{ matrix.platform_key }}": {' >> platform.json.tmp
          echo '    "url": "${{ fromJSON(steps.tauri_build.outputs.artifactInfo).url }}",' >> platform.json.tmp
          echo '    "signature": "${{ fromJSON(steps.tauri_build.outputs.artifactInfo).signature }}"' >> platform.json.tmp
          echo '  }' >> platform.json.tmp
          echo 'EOF' >> platform.json.tmp
          
          # 保存到文件以便后续步骤使用
          cat platform.json.tmp > platform_${{ matrix.platform_key }}.json
          
      - name: Upload platform JSON
        uses: actions/upload-artifact@v4
        with:
          name: platform-jsons
          path: platform_${{ matrix.platform_key }}.json

  # 3. 生成并上传latest.json
  generate-latest-json:
    needs: [prepare-and-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download all platform JSONs
        uses: actions/download-artifact@v4
        with:
          name: platform-jsons
          path: ./platforms
          
      - name: Generate latest.json
        run: |
          # 提取版本号和应用名称
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          APP_NAME="${{ needs.prepare-and-release.outputs.app_name }}"
          
          # 获取发布说明
          NOTES=$(cat << EOF
          本次更新包含多项改进和bug修复，提升了应用的稳定性和用户体验。
          详细更新内容请查看完整的发布说明。
          EOF
          )
          
          # 格式化发布说明
          NOTES=$(echo "$NOTES" | sed ':a;N;$!ba;s/\n/\\n/g')
          
          # 创建latest.json文件
          echo "{" > latest.json
          echo "  \"version\": \"$VERSION\"," >> latest.json
          echo "  \"notes\": \"$NOTES\"," >> latest.json
          echo "  \"pub_date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"," >> latest.json
          echo "  \"platforms\": {" >> latest.json
          
          # 合并所有平台的JSON片段
          FIRST=true
          for file in ./platforms/*.json; do
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              echo "," >> latest.json
            fi
            cat "$file" >> latest.json
          done
          
          echo "  }" >> latest.json
          echo "}" >> latest.json
          
          # 显示生成的latest.json内容
          cat latest.json
          
      - name: Upload latest.json to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: latest.json
          append_body: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}